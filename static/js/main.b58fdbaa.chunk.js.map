{"version":3,"sources":["utils/fetchClient.ts","api/todos.ts","api/users.ts","components/Auth/AuthForm.tsx","components/Auth/AuthContext.tsx","components/AddedTodoItem.tsx","components/TodoItem.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","deleteTodo","todoId","getUserByEmail","email","users","createUser","name","AuthForm","onLogin","useState","setEmail","setName","needToRegister","setNeedToRegister","loading","setLoading","errorMessage","setErrorMessage","saveUser","user","localStorage","setItem","useEffect","userData","getItem","parse","error","loadUser","handleSubmit","event","preventDefault","onSubmit","className","htmlFor","classNames","type","id","placeholder","disabled","value","required","onChange","e","target","minLength","AuthContext","React","createContext","AuthProvider","children","setUser","Provider","AddedTodoItem","memo","title","defaultChecked","TodoItem","props","todo","removeTodo","selectedTodoId","isRemoveLoading","updateTodoById","isUpdateLoading","isAllToggled","isDoubleClicked","setIsDoubleClicked","newTitle","setNewTitle","newTodoField","useRef","isLoading","current","focus","handleBlur","renameTodo","completed","checked","defaultValue","ref","onBlur","onKeyDown","key","onDoubleClick","onClick","TodoList","todos","map","App","setTodos","todoTitle","setTodoTitle","userId","setUserId","setSelectedTodoId","setIsLoading","setIsRemoveLoading","setError","setIsUpdateLoading","todosState","setTodosState","shouldUpdate","setShouldUpdate","setIsAllToggled","useContext","errorSwitcher","errorText","getTodos","res","finally","addNewTodo","useCallback","trim","addTodo","prev","catch","updateTodo","toggleAllCompleted","areAllCompleted","every","forEach","visibleTodos","useMemo","filter","clearCompletedTodos","length","href","style","some","opacity","Root","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.b58fdbaa.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: <T>(url: string) => request<T>(url, 'DELETE'),\n};\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const addTodo = (title: string, userId: number, completed: boolean) => {\n  return client.post<Todo>('/todos', { title, userId, completed });\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n\nexport const updateTodo = (todoId: number, data: {}) => {\n  return client.patch(`/todos/${todoId}`, data);\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserByEmail = async (email: string) => {\n  const users = await client.get<User[]>(`/users?email=${email}`);\n\n  return users[0] || null;\n};\n\ntype UserData = Pick<User, 'name' | 'email'>;\n\nexport const createUser = async ({ email, name }: UserData) => {\n  return client.post<User>('/users', { email, name });\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { createUser, getUserByEmail } from '../../api/users';\nimport { User } from '../../types/User';\n\nexport type Props = {\n  onLogin: (user: User) => void,\n};\n\nexport const AuthForm: React.FC<Props> = ({ onLogin }) => {\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [needToRegister, setNeedToRegister] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const saveUser = (user: User) => {\n    localStorage.setItem('user', JSON.stringify(user));\n    onLogin(user);\n  };\n\n  useEffect(() => {\n    const userData = localStorage.getItem('user');\n\n    if (!userData) {\n      return;\n    }\n\n    try {\n      const user = JSON.parse(userData) as User;\n\n      onLogin(user);\n    } catch (error) {\n      // Need to login\n    }\n  }, []);\n\n  const loadUser = async () => {\n    const user = await getUserByEmail(email);\n\n    if (user) {\n      saveUser(user);\n    } else {\n      setNeedToRegister(true);\n    }\n  };\n\n  const registerUser = () => {\n    return createUser({ name, email })\n      .then(saveUser);\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setErrorMessage('');\n    setLoading(true);\n\n    try {\n      if (needToRegister) {\n        await registerUser();\n      } else {\n        await loadUser();\n      }\n    } catch (error) {\n      setErrorMessage('Something went wrtong');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"box mt-5\">\n      <h1 className=\"title is-3\">\n        {needToRegister ? 'You need to register' : 'Log in to open todos'}\n      </h1>\n\n      <div className=\"field\">\n        <label className=\"label\" htmlFor=\"user-email\">\n          Email\n\n          <div\n            className={classNames('control has-icons-left', {\n              'is-loading': loading,\n            })}\n          >\n            <input\n              type=\"email\"\n              id=\"user-email\"\n              className={classNames('input', {\n                'is-danger': !needToRegister && errorMessage,\n              })}\n              placeholder=\"Enter your email\"\n              disabled={loading || needToRegister}\n              value={email}\n              required\n              onChange={e => setEmail(e.target.value)}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-envelope\" />\n            </span>\n          </div>\n        </label>\n\n        {!needToRegister && errorMessage && (\n          <p className=\"help is-danger\">{errorMessage}</p>\n        )}\n      </div>\n\n      {needToRegister && (\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"user-name\">\n            Your Name\n\n            <div\n              className={classNames('control has-icons-left', {\n                'is-loading': loading,\n              })}\n            >\n              <input\n                type=\"text\"\n                id=\"user-name\"\n                className={classNames('input', {\n                  'is-danger': needToRegister && errorMessage,\n                })}\n                placeholder=\"Enter your name\"\n                required\n                minLength={4}\n                disabled={loading}\n                value={name}\n                onChange={e => setName(e.target.value)}\n              />\n\n              <span className=\"icon is-small is-left\">\n                <i className=\"fas fa-user\" />\n              </span>\n            </div>\n          </label>\n\n          {needToRegister && errorMessage && (\n            <p className=\"help is-danger\">{errorMessage}</p>\n          )}\n        </div>\n      )}\n\n      <div className=\"field\">\n        <button\n          type=\"submit\"\n          className={classNames('button is-primary', {\n            'is-loading': loading,\n          })}\n        >\n          {needToRegister ? 'Register' : 'Login'}\n        </button>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { User } from '../../types/User';\nimport { AuthForm } from './AuthForm';\n\nexport const AuthContext = React.createContext<User | null>(null);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const AuthProvider: React.FC<Props> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  if (!user) {\n    return <AuthForm onLogin={setUser} />;\n  }\n\n  return (\n    <AuthContext.Provider value={user}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  title: string;\n};\n\nexport const AddedTodoItem: React.FC<Props> = React.memo(\n  ({ title }) => {\n    return (\n      <div data-cy=\"Todo\" className=\"todo\">\n        <label className=\"todo__status-label\" htmlFor=\"todoInput\">\n          <input\n            data-cy=\"TodoStatus\"\n            type=\"checkbox\"\n            className=\"todo__status\"\n            defaultChecked\n            id=\"todoInput\"\n          />\n        </label>\n\n        <span data-cy=\"TodoTitle\" className=\"todo__title\">{title}</span>\n        <button\n          type=\"button\"\n          className=\"todo__remove\"\n          data-cy=\"TodoDeleteButton\"\n        >\n          ×\n        </button>\n\n        <div data-cy=\"TodoLoader\" className=\"modal overlay is-active\">\n          <div className=\"modal-background has-background-white-ter\" />\n          <div className=\"loader\" />\n        </div>\n      </div>\n    );\n  },\n);\n","import classNames from 'classnames';\nimport React, {\n  KeyboardEvent,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  removeTodo: (todoId: number) => void;\n  selectedTodoId: number | null;\n  isRemoveLoading: boolean;\n  updateTodoById: (todoId: number, data: {}) => void;\n  isUpdateLoading: boolean;\n  isAllToggled: boolean;\n};\n\nexport const TodoItem: React.FC<Props> = React.memo(\n  (props) => {\n    const {\n      todo,\n      removeTodo,\n      selectedTodoId,\n      isRemoveLoading,\n      updateTodoById,\n      isUpdateLoading,\n      isAllToggled,\n    } = props;\n\n    const [isDoubleClicked, setIsDoubleClicked] = useState(false);\n    const [newTitle, setNewTitle] = useState(todo.title);\n\n    const newTodoField = useRef<HTMLInputElement>(null);\n\n    const isLoading = ((isRemoveLoading && selectedTodoId === todo.id)\n      || (isUpdateLoading && selectedTodoId === todo.id)\n      || (isAllToggled));\n\n    useEffect(() => {\n      if (newTodoField.current) {\n        newTodoField.current.focus();\n      }\n    }, [isDoubleClicked]);\n\n    const handleBlur = () => setIsDoubleClicked(false);\n\n    const changeCompleteStatus = () => {\n      updateTodoById(todo.id, { completed: !todo.completed });\n    };\n\n    const renameTodo = (todoId: number) => {\n      if (!newTitle) {\n        removeTodo(todo.id);\n\n        return;\n      }\n\n      updateTodoById(todoId, { title: newTitle });\n      setIsDoubleClicked(false);\n    };\n\n    const handleKeyPress = (\n      event: KeyboardEvent<HTMLInputElement>,\n      todoId: number,\n    ) => {\n      if (event.key === 'Escape') {\n        handleBlur();\n        setNewTitle(todo.title);\n      }\n\n      if (event.key === 'Enter') {\n        renameTodo(todoId);\n        handleBlur();\n      }\n    };\n\n    return (\n      <div\n        data-cy=\"Todo\"\n        className={classNames('todo', { completed: todo.completed })}\n      >\n        <label className=\"todo__status-label\" htmlFor=\"todoStatus\">\n          <input\n            data-cy=\"TodoStatus\"\n            type=\"checkbox\"\n            className=\"todo__status\"\n            checked={todo.completed}\n            onChange={changeCompleteStatus}\n            id=\"todoStatus\"\n          />\n        </label>\n\n        {isDoubleClicked\n          ? (\n            <form>\n              <input\n                data-cy=\"TodoTitleField\"\n                type=\"text\"\n                className=\"todo__title-field\"\n                placeholder=\"Empty todo will be deleted\"\n                defaultValue={newTitle}\n                ref={newTodoField}\n                onBlur={() => {\n                  renameTodo(todo.id);\n                  handleBlur();\n                }}\n                onChange={(e) => setNewTitle(e.target.value)}\n                onKeyDown={(e) => handleKeyPress(e, todo.id)}\n              />\n            </form>\n          )\n          : (\n            <>\n              <span\n                data-cy=\"TodoTitle\"\n                className=\"todo__title\"\n                onDoubleClick={() => setIsDoubleClicked(true)}\n              >\n                {todo.title}\n              </span>\n              <button\n                type=\"button\"\n                className=\"todo__remove\"\n                data-cy=\"TodoDeleteButton\"\n                onClick={() => {\n                  removeTodo(todo.id);\n                }}\n              >\n                ×\n              </button>\n            </>\n          )}\n\n        {isLoading && (\n          <div\n            data-cy=\"TodoLoader\"\n            className={classNames('modal overlay',\n              { 'is-active': (isRemoveLoading || isUpdateLoading) })}\n          >\n            <div className=\"modal-background has-background-white-ter\" />\n            <div className=\"loader\" />\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n","import React from 'react';\nimport { Todo } from '../types/Todo';\nimport { AddedTodoItem } from './AddedTodoItem';\nimport { TodoItem } from './TodoItem';\n\ntype Props = {\n  todos: Todo[];\n  removeTodo: (todoId: number) => void;\n  selectedTodoId: number | null;\n  isLoading: boolean;\n  title: string;\n  isRemoveLoading: boolean;\n  updateTodoById: (todoId: number, data: {}) => void;\n  isUpdateLoading: boolean;\n  isAllToggled: boolean;\n};\n\nexport const TodoList: React.FC<Props> = React.memo(\n  (props) => {\n    const {\n      todos,\n      removeTodo,\n      selectedTodoId,\n      isLoading,\n      title,\n      isRemoveLoading,\n      updateTodoById,\n      isUpdateLoading,\n      isAllToggled,\n    } = props;\n\n    return (\n      <section className=\"todoapp__main\" data-cy=\"TodoList\">\n        {todos.map(todo => {\n          return (\n            <TodoItem\n              todo={todo}\n              key={todo.id}\n              removeTodo={removeTodo}\n              selectedTodoId={selectedTodoId}\n              isRemoveLoading={isRemoveLoading}\n              updateTodoById={updateTodoById}\n              isUpdateLoading={isUpdateLoading}\n              isAllToggled={isAllToggled}\n            />\n          );\n        })}\n\n        {isLoading && <AddedTodoItem title={title} />}\n      </section>\n    );\n  },\n);\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, {\n  FormEvent,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport {\n  addTodo,\n  deleteTodo,\n  getTodos,\n  updateTodo,\n} from './api/todos';\nimport { AuthContext } from './components/Auth/AuthContext';\nimport { TodoList } from './components/TodoList';\nimport './styles/App.scss';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [selectedTodoId, setSelectedTodoId] = useState<number | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isRemoveLoading, setIsRemoveLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [isUpdateLoading, setIsUpdateLoading] = useState(false);\n  const [todosState, setTodosState] = useState('all');\n  const [shouldUpdate, setShouldUpdate] = useState(false);\n  const [isAllToggled, setIsAllToggled] = useState(false);\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const user = useContext(AuthContext);\n\n  const errorSwitcher = (errorText: string) => {\n    setError(errorText);\n\n    setTimeout(() => setError(''), 3000);\n  };\n\n  useEffect(() => {\n    if (user) {\n      setUserId(user.id);\n\n      getTodos(user.id)\n        .then(res => {\n          setTodos(res);\n        })\n        .finally(() => {\n          setShouldUpdate(false);\n        });\n    }\n  }, [user, shouldUpdate, isAllToggled]);\n\n  const addNewTodo = useCallback((event: FormEvent) => {\n    event.preventDefault();\n\n    if (!todoTitle.trim()) {\n      errorSwitcher('Title can\\'t be empty');\n\n      return;\n    }\n\n    setIsLoading(true);\n\n    if (user) {\n      addTodo(todoTitle, userId, false)\n        .then(res => setTodos(prev => [...prev, res]))\n        .catch(() => errorSwitcher('Unable to add a todo'))\n        .finally(() => {\n          setTodoTitle('');\n          setIsAllToggled(false);\n          setIsLoading(false);\n        });\n    }\n  }, [todoTitle, user]);\n\n  const updateTodoById = useCallback((todoId: number, data: {}) => {\n    setSelectedTodoId(todoId);\n    setIsUpdateLoading(true);\n    updateTodo(todoId, data)\n      .then(() => {\n        setShouldUpdate(true);\n      })\n      .catch(() => errorSwitcher('Unable to update a todo'))\n      .finally(() => {\n        setIsUpdateLoading(false);\n        setIsAllToggled(false);\n      });\n  }, []);\n\n  const toggleAllCompleted = useCallback(() => {\n    const areAllCompleted = todos.every(todo => todo.completed === true);\n\n    setIsAllToggled(true);\n    todos.forEach((todo) => updateTodoById(\n      todo.id, { completed: !areAllCompleted },\n    ));\n  }, [todos]);\n\n  const removeTodo = useCallback((todoId: number) => {\n    setSelectedTodoId(todoId);\n    setIsRemoveLoading(true);\n\n    deleteTodo(todoId)\n      .then(res => {\n        if (res) {\n          setShouldUpdate(true);\n        }\n      })\n      .catch(() => errorSwitcher('Unable to delete a todo'))\n      .finally(() => setIsRemoveLoading(false));\n  }, []);\n\n  const visibleTodos: Todo[] = useMemo(() => {\n    return todos.filter(todo => {\n      if (todosState === 'completed') {\n        return todo.completed === true;\n      }\n\n      if (todosState === 'active') {\n        return todo.completed === false;\n      }\n\n      return todo;\n    });\n  }, [todosState, todos]);\n\n  const clearCompletedTodos = useCallback(\n    () => {\n      const todosToDelete = todos.filter(todo => todo.completed);\n\n      todosToDelete.map(todo => deleteTodo(todo.id));\n\n      setShouldUpdate(true);\n    }, [todos],\n  );\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <header className=\"todoapp__header\">\n\n          {visibleTodos.length > 0 && (\n            <button\n              data-cy=\"ToggleAllButton\"\n              type=\"button\"\n              className={`todoapp__toggle-all ${todos.every(todo => todo.completed) ? 'active' : ''}`}\n              onClick={() => toggleAllCompleted()}\n            />\n          )}\n\n          <form onSubmit={addNewTodo}>\n            <input\n              data-cy=\"NewTodoField\"\n              type=\"text\"\n              className=\"todoapp__new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={todoTitle}\n              onChange={(e) => setTodoTitle(e.target.value)}\n            />\n          </form>\n        </header>\n\n        <TodoList\n          todos={visibleTodos}\n          removeTodo={removeTodo}\n          selectedTodoId={selectedTodoId}\n          isLoading={isLoading}\n          title={todoTitle}\n          isRemoveLoading={isRemoveLoading}\n          updateTodoById={updateTodoById}\n          isUpdateLoading={isUpdateLoading}\n          isAllToggled={isAllToggled}\n        />\n\n        {todos.length > 0 && (\n          <footer className=\"todoapp__footer\" data-cy=\"Footer\">\n            <span className=\"todo-count\" data-cy=\"todosCounter\">\n              {`${todos.filter(todo => !todo.completed).length} items left`}\n            </span>\n\n            <nav className=\"filter\" data-cy=\"Filter\">\n              <a\n                data-cy=\"FilterLinkAll\"\n                href=\"#/\"\n                className={`filter__link ${todosState === 'all' ? 'selected' : ''}`}\n                onClick={() => setTodosState('all')}\n              >\n                All\n              </a>\n\n              <a\n                data-cy=\"FilterLinkActive\"\n                href=\"#/active\"\n                className={`filter__link ${todosState === 'active' ? 'selected' : ''}`}\n                onClick={() => setTodosState('active')}\n              >\n                Active\n              </a>\n              <a\n                data-cy=\"FilterLinkCompleted\"\n                href=\"#/completed\"\n                className={`filter__link ${todosState === 'completed' ? 'selected' : ''}`}\n                onClick={() => setTodosState('completed')}\n              >\n                Completed\n              </a>\n            </nav>\n\n            <button\n              data-cy=\"ClearCompletedButton\"\n              type=\"button\"\n              className=\"todoapp__clear-completed\"\n              onClick={() => clearCompletedTodos()}\n              style={todos.some(todo => todo.completed)\n                ? { opacity: 1 }\n                : { opacity: 0 }}\n            >\n              Clear completed\n            </button>\n          </footer>\n        )}\n\n      </div>\n      {error && (\n        <div\n          data-cy=\"ErrorNotification\"\n          className=\"notification is-danger is-light has-text-weight-normal\"\n        >\n          <button\n            data-cy=\"HideErrorButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => setError('')}\n          />\n          {error}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\nimport { AuthProvider } from './components/Auth/AuthContext';\n\nconst Root = () => (\n  <AuthProvider>\n    <App />\n  </AuthProvider>\n);\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}